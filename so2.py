import random
import string


def generate_password(length=12, include_symbols=True, include_numbers=True):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π –ø–∞—Ä–æ–ª—å –∑–∞–¥–∞–Ω–Ω–æ–π –¥–ª–∏–Ω—ã"""

    # –ë–∞–∑–æ–≤—ã–π –Ω–∞–±–æ—Ä —Å–∏–º–≤–æ–ª–æ–≤ - –±—É–∫–≤—ã
    chars = string.ascii_letters

    # –î–æ–±–∞–≤–ª—è–µ–º —Ü–∏—Ñ—Ä—ã –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if include_numbers:
        chars += string.digits

    # –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if include_symbols:
        chars += "!@#$%^&*"

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å
    password = ''.join(random.choice(chars) for _ in range(length))
    return password


def check_password_strength(password):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–∏–ª—É –ø–∞—Ä–æ–ª—è"""
    score = 0
    feedback = []

    if len(password) >= 8:
        score += 1
    else:
        feedback.append("–î–æ–±–∞–≤—å—Ç–µ –±–æ–ª—å—à–µ —Å–∏–º–≤–æ–ª–æ–≤ 11(–º–∏–Ω–∏–º—É–º 8)")

    if any(c.isupper() for c in password):
        score += 1
    else:
        feedback.append("–î–æ–±–∞–≤—å—Ç–µ –∑–∞–≥–ª–∞–≤–Ω—ã–µ –±—É–∫–≤—ã")

    if any(c.islower() for c in password):
        score += 1

    if any(c.isdigit() for c in password):
        score += 1
    else:
        feedback.append("–î–æ–±–∞–≤—å—Ç–µ —Ü–∏—Ñ—Ä—ã")

    strength = ["–û—á–µ–Ω—å —Å–ª–∞–±—ã–π", "–°–ª–∞–±—ã–π", "–°—Ä–µ–¥–Ω–∏–π", "–°–∏–ª—å–Ω—ã–π", "–û—á–µ–Ω—å —Å–∏–ª—å–Ω—ã–π"][score]
    return strength, feedback


# –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã
print("üîê –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø–∞—Ä–æ–ª–µ–π")
print("-" * 30)

for i in range(3):
    password = generate_password(length=random.randint(8, 16))
    strength, tips = check_password_strength(password)
    print(f"–ü–∞—Ä–æ–ª—å: {password}")
    print(f"–°–∏–ª–∞: {strength}")
    if tips:
        print(f"–°–æ–≤–µ—Ç—ã: {', '.join(tips)}")
    print()
